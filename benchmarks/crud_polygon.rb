require 'benchmark'
require 'csv'


class CrudPolygonTests
  def initialize(repeat_times)
    @repeat_times = repeat_times
    @add_time = 0
    @read_time = 0
    @update_time = 0
    @delete_time = 0
    @file_name = "./roda_crud_polygon_model_#{@repeat_times}.csv"

    @p1 = RGeo::Geos.factory(srid: 4326).parse_wkt('MULTIPOLYGON(((17.025461196899414 51.10336531155195,17.020225524902344 51.10298804796575,'+
      '17.019367218017578 51.10085914573741,17.01910972595215 51.0994308399253,17.01829433441162 51.09821809280455,17.020010948181152 51.09662799838328,'+
      '17.020397186279297 51.09474137475155,17.023401260375977 51.094283183109354,17.024216651916504 51.092935534318435,17.02601909637451 51.09455270815461,'+
      '17.02885150909424 51.09282772071848,17.03481674194336 51.09209997234422,17.029967308044434 51.094283183109354,17.0343017578125 51.09541517774241,'+
      '17.03378677368164 51.093824986927075,17.036919593811035 51.09331287993879,17.041125297546387 51.094417945828376,17.040867805480957 51.09910744380352,'+
      '17.03730583190918 51.097786886162154,17.035245895385742 51.10091304320592,17.038249969482422 51.102287407422885,17.033400535583496 51.102961100448944,'+
      '17.029237747192383 51.10309583787599,17.025976181030273 51.102233511556676,17.025461196899414 51.10336531155195)))')
    @p1 = RGeo::WKRep::WKBGenerator.new(hex_format: true, type_format: :ewkb, emit_ewkb_srid: true).generate(@p1)

    @p2 = RGeo::Geos.factory(srid: 4326).parse_wkt('MULTIPOLYGON(((17.025461196899414 51.10336531155195,17.020225524902344 51.10298804796575,17.019367218017578 51.10085914573741,'+
      '17.01910972595215 51.0994308399253,17.01829433441162 51.09821809280455,17.020010948181152 51.09662799838328,17.020397186279297 51.09474137475155,'+
      '17.023401260375977 51.094283183109354,17.024216651916504 51.092935534318435,17.02601909637451 51.09455270815461,17.02885150909424 51.09282772071848,'+
      '17.03481674194336 51.09209997234422,17.029967308044434 51.094283183109354,17.0343017578125 51.09541517774241,17.03378677368164 51.093824986927075,'+
      '17.036919593811035 51.09331287993879,17.041125297546387 51.094417945828376,17.040867805480957 51.09910744380352,17.03730583190918 51.097786886162154,'+
      '17.037391662597656 51.10077829941675,17.038249969482422 51.102287407422885,17.033400535583496 51.102961100448944,17.029237747192383 51.10309583787599,'+
      '17.025976181030273 51.102233511556676,17.025461196899414 51.10336531155195)))')
    @p2 = RGeo::WKRep::WKBGenerator.new(hex_format: true, type_format: :ewkb, emit_ewkb_srid: true).generate(@p2)

    @entity = nil
  end

  def run_tests
    @repeat_times.times do
      @add_time += Benchmark.realtime { add }
      @read_time += Benchmark.realtime { read }
      @update_time += Benchmark.realtime { update }
      @delete_time += Benchmark.realtime { delete }
    end
    results = { "Odczytanie wielokątu" => @read_time/@repeat_times*1000,
      "Dodanie wielokątu" => @add_time/@repeat_times*1000,
      "Zaktualizowanie wielokątu" => @update_time/@repeat_times*1000,
      "Usunięcie wielokątu" => @delete_time/@repeat_times*1000  }
    CSV.open(@file_name, "wb") do |csv|
      results.each do |key, value|
        csv << [key, value]
      end
    end
  end

  private
  
  def add
    @entity = Polygon.create({name: 'test',
      coordinates: @p1,
      unit_type: 5, terc: "123456"})
  end

  def read
    Polygon[@entity.id]
  end

  def update
    Polygon[@entity.id].update({name: 'updated',
      coordinates: @p2})
  end

  def delete
     Polygon[@entity.id].delete
  end
end